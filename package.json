{
  "name": "hello-world",
  "version": "1.0.0",
  "description": "Hello World",
  "scripts": {
    "init": "mate-scripts init",
    "start": "mate-scripts start",
    "format": "prettier --ignore-path .prettierignore --write './src/**/*.{html,css,scss}'",
    "lint": "npm run format && mate-scripts lint",
    "test:only": "mate-scripts test",
    "build": "mate-scripts build",
    "deploy": "mate-scripts deploy",
    "update": "mate-scripts update",
    "postinstall": "npm run update",
    "test": "npm run lint && npm run test:only"
  },
  "keywords": [],
  "author": "Mate Academy",
  "license": "GPL-3.0",
  "dependencies": {},
  "devDependencies": {
    "@linthtml/linthtml": "^0.9.6",
    "@mate-academy/backstop-config": "latest",
    "@mate-academy/bemlint": "latest",
    "@mate-academy/linthtml-config": "latest",
    "@mate-academy/scripts": "^1.8.6",
    "@mate-academy/stylelint-config": "latest",
    "backstopjs": "6.3.23",
    "jest": "^29.7.0",
    "parcel": "^2.12.0",
    "prettier": "^3.3.2",
    "stylelint": "^16.7.0",
    "stylelint-scss": "^6.4.1"
  },
  "mateAcademy": {
    "projectType": "layout",
    "linters": {
      "javascript": false,
      "bem": false
    }
  }
}

import unittest
import random

def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

def multiply(a, b):
    return a * b

def divide(a, b):
    if b == 0:
        raise ValueError("Cannot divide by zero")
    return a / b

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

class TestMathOperations(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(3, 5), 8)
        self.assertEqual(add(-1, 1), 0)

    def test_subtract(self):
        self.assertEqual(subtract(10, 4), 6)
        self.assertEqual(subtract(0, 7), -7)

    def test_multiply(self):
        self.assertEqual(multiply(3, 4), 12)
        self.assertEqual(multiply(-2, 5), -10)

    def test_divide(self):
        self.assertEqual(divide(10, 2), 5)
        with self.assertRaises(ValueError):
            divide(5, 0)

    def test_is_prime(self):
        self.assertTrue(is_prime(7))
        self.assertFalse(is_prime(8))
        self.assertTrue(is_prime(13))
        self.assertFalse(is_prime(1))

if __name__ == "__main__":
    unittest.main()
